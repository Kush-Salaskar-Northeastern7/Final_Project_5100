/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientAppointmentWorkRequest;
import Business.WorkQueue.PatientOrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import org.jfree.chart.ui.ApplicationFrame;
import org.jfree.data.category.CategoryDataset;  
import org.jfree.chart.ChartFactory;  
import org.jfree.chart.ChartPanel;  
import org.jfree.chart.JFreeChart;  
import org.jfree.chart.plot.PlotOrientation;  
import org.jfree.data.category.CategoryDataset;  
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author anushka
 */
public class Graph2JPanel extends javax.swing.JPanel {

    /**
     * Creates new form Graph2JPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem ecosystem;
    private Customer customer;
    public Graph2JPanel(JPanel userProcessContainer, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;        
//        this.userAccount = account;
        this.ecosystem = ecosystem;
        SwingUtilities.invokeLater(() -> {  
      Graph2JPanel.BarChartExample example = new Graph2JPanel.BarChartExample("Bar Chart");  
      example.setAlwaysOnTop(true);  
      example.pack();  
      example.setSize(600, 400);  
      example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  
      example.setVisible(true);  
    });  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
public class BarChartExample extends ApplicationFrame {  
  
  private static final long serialVersionUID = 1L;  
  
  public BarChartExample(String appTitle) {  
    super(appTitle);  
  
    // Create Dataset  
    CategoryDataset dataset = createDataset();  
      
    //Create chart  
    JFreeChart chart=ChartFactory.createBarChart(  
        "Quantity Ordered vs Administered to Patient", //Chart Title  
        "Type of Diabetes", // Category axis  
        "Number of Doses", // Value axis  
        dataset,  
        PlotOrientation.VERTICAL,  
        true,true,false  
       );  
  
    ChartPanel panel=new ChartPanel(chart);  
    setContentPane(panel);  
  }  
  
  private CategoryDataset createDataset() {  
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();  
  
      int orderedQuantity1 = 0;
      int orderedQuantity2 = 0;
      int apptQuantity1 = 0;
      int apptQuantity2 = 0;
      for(Customer c : ecosystem.getCustomerDirectory().getCustomerList()){
          for(WorkRequest wr : c.getUserAccount().getWorkQueue().getWorkRequestList()){
              if(wr instanceof PatientAppointmentWorkRequest){
//                  apptQuantity += ((PatientAppointmentWorkRequest) wr).getQuantity();
                    if(((PatientAppointmentWorkRequest) wr).isType1()){
                        apptQuantity1 += ((PatientAppointmentWorkRequest) wr).getQuantity();
                    }else{
                        apptQuantity2 += ((PatientAppointmentWorkRequest) wr).getQuantity();
                    }
              }
              if(wr instanceof PatientOrderWorkRequest){
//                  orderedQuantity += ((PatientOrderWorkRequest) wr).getQuantity();
                    if(((PatientOrderWorkRequest) wr).isType1()){
                       orderedQuantity1 +=  ((PatientOrderWorkRequest) wr).getQuantity();
                    }else{
                        orderedQuantity2 += ((PatientOrderWorkRequest) wr).getQuantity();
                    }
              }
          }
      }
    
    // Type 1 Insulin  
    dataset.addValue(orderedQuantity1, "Ordered Doses", "Type 1 Insulin");  
    dataset.addValue(apptQuantity1, "Administered Doses", "Type 1 Insulin");  
  
    // Type 2 Insulin  
    dataset.addValue(orderedQuantity2, "Ordered Doses", "Type 2 Insulin");  
    dataset.addValue(apptQuantity2, "Administered Doses", "Type 2 Insulin");
  
    return dataset;  
  }  
  
  
  }  
} 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

